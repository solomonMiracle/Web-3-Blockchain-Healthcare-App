var C=Object.defineProperty;var w=(i,e,t)=>e in i?C(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var o=(i,e,t)=>(w(i,typeof e!="symbol"?e+"":e,t),t);import{N as W,b as f,A as T,c as b,al as y,d as A,e as S,f as N,g as E,k as R,G as k,i as U,l as M,m as I,am as x,ak as d,an as F,ao as _,n as L,B as c,a5 as u,o as v,p as B,q as p,T as O}from"./index.5d446f14.js";import{S as D}from"./erc-721-standard-c858f30e.browser.esm.deaa2a60.js";import{P as G}from"./thirdweb-checkout-49195812.browser.esm.7dae246c.js";const m=class extends D{constructor(t,a,r){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,l=arguments.length>5?arguments[5]:void 0,g=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new f(t,a,s,n,r);super(g,r,l);o(this,"createBatch",p(async(t,a)=>this.erc721.lazyMint.prepare(t,a)));o(this,"claimTo",p(async(t,a,r)=>this.erc721.claimTo.prepare(t,a,r)));o(this,"claim",p(async(t,a)=>this.erc721.claim.prepare(t,a)));o(this,"burn",p(async t=>this.erc721.burn.prepare(t)));this.abi=T.parse(s||[]),this.metadata=new b(this.contractWrapper,y,this.storage),this.app=new A(this.contractWrapper,this.metadata,this.storage),this.roles=new S(this.contractWrapper,m.contractRoles),this.royalties=new N(this.contractWrapper,this.metadata),this.sales=new E(this.contractWrapper),this.encoder=new R(this.contractWrapper),this.estimator=new k(this.contractWrapper),this.events=new U(this.contractWrapper),this.platformFees=new M(this.contractWrapper),this.interceptor=new I(this.contractWrapper),this.claimConditions=new x(this.contractWrapper,this.metadata,this.storage),this.signature=new d(this.contractWrapper,this.storage),this.revealer=new F(this.contractWrapper,this.storage,_.name,()=>this.erc721.nextTokenIdToMint()),this.signature=new d(this.contractWrapper,this.storage),this.owner=new L(this.contractWrapper),this.checkout=new G(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async totalSupply(){const[t,a]=await Promise.all([this.totalClaimedSupply(),this.totalUnclaimedSupply()]);return t.add(a)}async getAllClaimed(t){const a=c.from((t==null?void 0:t.start)||0).toNumber(),r=c.from((t==null?void 0:t.count)||u).toNumber(),n=Math.min((await this.totalClaimedSupply()).toNumber(),a+r);return await Promise.all(Array.from(Array(n).keys()).map(s=>this.get(s.toString())))}async getAllUnclaimed(t){const a=c.from((t==null?void 0:t.start)||0).toNumber(),r=c.from((t==null?void 0:t.count)||u).toNumber(),n=c.from(Math.max((await this.totalClaimedSupply()).toNumber(),a)),s=c.from(Math.min((await this.contractWrapper.read("nextTokenIdToMint",[])).toNumber(),n.toNumber()+r));return await Promise.all(Array.from(Array(s.sub(n).toNumber()).keys()).map(l=>this.erc721.getTokenMetadata(n.add(l).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[v("transfer"),B])}async getClaimTransaction(t,a,r){return this.erc721.getClaimTransaction(t,a,r)}async prepare(t,a,r){return O.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:a,overrides:r})}async call(t,a,r){return this.contractWrapper.call(t,a,r)}};let h=m;o(h,"contractRoles",W);export{h as SignatureDrop};
